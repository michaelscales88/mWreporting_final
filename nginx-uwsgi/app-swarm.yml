version: '3.6'

services:
  # Application
  uwsgi:
    image: flask_base:latest
    env_file: envs/app.env
    volumes:
      - app_instance:/var/instance
    configs:
      - source: start_flask
        target: /var/start_flask.sh
        mode: 0755
      - source: uwsgi_ini
        target: /uwsgi/uwsgi.ini
    networks:
      - proxy_network
    ports:
      - "8001"
    command: sh /var/start_flask.sh
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]

  # Worker Process for worker threads
  worker:
    image: flask_base:latest
    env_file: envs/app.env
    volumes:
      - app_instance:/var/instance
    working_dir: /var
    networks:
      - proxy_network
    command: celery worker -A modules.celery_worker.celery --beat -l debug
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]

  # Task Broker GUI management
  flower:
    image: flask_base:latest
    env_file: envs/app.env
    volumes:
      - app_instance:/var/instance
    networks:
      - proxy_network
    ports:
      - "5555"
    working_dir: /var
    command: celery flower -A modules.celery_worker.celery
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]

  # Task Broker for network
  rabbit:
    image: rabbitmq:3.6.6-management
    env_file: envs/app.env
    ports:
    - "5672"
    - target: 25672
      published: 25672
      protocol: tcp
      mode: host
    networks:
      - proxy_network
    deploy:
      mode: global
      placement:
        constraints: [node.role == manager]

# Shared volume persists application information
volumes:
  app_instance:

networks:
  proxy_network:
    external: true

configs:
  start_flask:
    file: ./start_flask.sh
  uwsgi_ini:
    file: ./uwsgi.ini
